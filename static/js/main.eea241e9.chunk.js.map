{"version":3,"sources":["components/Title.js","components/Controls/Search.js","components/Controls/Sort.js","components/Control.js","components/TodoLists/Todo.js","components/ListTodo.js","components/FormAdd.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Component","Search","state","strSearch","clickSearch","props","onClickSearch","clickClear","setState","handleChange","event","target","value","type","name","this","onChange","placeholder","onClick","Sort","handleSort","orderBy","orderDir","onClickSort","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","clickAdd","onClickAdd","isShowFormAdd","isShowForm","elmBtnShowForm","Todo","setElementLevel","level","elmStatus","handleDelete","handelDeleteTodo","onClickEdit","todo","index","task","style","textAlign","verticalAlign","ListTodo","elmTodo","todoList","map","item","key","width","FormAdd","clickClose","onClickClose","handleSubmit","preventDefault","onClickSubmit","componentWillMount","todoSelected","componentWillReceiveProps","nextProps","checked","onSubmit","htmlFor","uuidv4","require","v4","App","listTodoMock","JSON","parse","localStorage","getItem","handleSearch","handelSort","filter","e","setItem","stringify","forEach","push","handleEditTodo","componentWillUnmount","console","log","elmForm","length","toLowerCase","includes","funcOrderBy","srtSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eea241e9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page--header\">\r\n                <h1>Project - Todo List</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        strSearch: \"\",\r\n    };\r\n    clickSearch = () => {\r\n        this.props.onClickSearch(this.state.strSearch);\r\n    };\r\n\r\n    clickClear = () => {\r\n        this.setState({\r\n            strSearch: \"\",\r\n        });\r\n        this.props.onClickSearch(\"\");\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ strSearch: event.target.value });\r\n    };\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n                <div className=\"input-group \">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"strSearch\"\r\n                        value={this.state.strSearch}\r\n                        onChange={this.handleChange}\r\n                        className=\"form-control \"\r\n                        placeholder=\"...\"\r\n                    />\r\n                    <span className=\"input-group-append\">\r\n                        <button\r\n                            onClick={this.clickSearch}\r\n                            className=\"btn btn-info\"\r\n                        >\r\n                            Search\r\n                        </button>\r\n                        <button\r\n                            onClick={this.clickClear}\r\n                            className=\"btn btn-warning\"\r\n                        >\r\n                            Clear\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Sort extends Component {\r\n    handleSort = (orderBy, orderDir) => {\r\n        this.props.onClickSort(orderBy,orderDir)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3\">\r\n                    <div className=\"dropdown\">\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-default dropdown-toggle\"\r\n                            id=\"dropdownMenu1\"\r\n                            data-toggle=\"dropdown\"\r\n                            aria-haspopup=\"true\"\r\n                            aria-expanded=\"true\"\r\n                        >\r\n                            Sort by <span className=\"caret\" />\r\n                        </button>\r\n                        <ul\r\n                            className=\"dropdown-menu\"\r\n                            aria-labelledby=\"dropdownMenu1\"\r\n                        >\r\n                            <li>\r\n                                <a onClick={() => this.handleSort('task','asc')} role=\"button\" className=\"btn dropdown-item\">Name ASC</a>\r\n                            </li>\r\n                            <li>\r\n                                <a onClick={() => this.handleSort('task','desc')} role=\"button\" className=\"btn dropdown-item\">Name DESC</a>\r\n                            </li>\r\n                            <li role=\"separator\" className=\"dropdown-divider\" />\r\n                            <li>\r\n                                <a onClick={() => this.handleSort('level','asc')} role=\"button\" className=\"btn dropdown-item\">Level ASC</a>\r\n                            </li>\r\n                            <li>\r\n                                <a onClick={() => this.handleSort('level','desc')} role=\"button\" className=\"btn dropdown-item\">Level DESC</a>\r\n                            </li>\r\n                        </ul>\r\n                        <span className=\"label label-success label-medium\" />\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sort;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Search from \"./Controls/Search\";\r\nimport Sort from \"./Controls/Sort\";\r\nclass Control extends Component {\r\n    clickAdd = () => {\r\n        this.props.onClickAdd();\r\n    }\r\n    render() {\r\n        let isShowFormAdd = this.props.isShowForm;\r\n        let   elmBtnShowForm = (\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-info btn-block\"\r\n                    onClick={this.clickAdd}\r\n                >\r\n                    Add\r\n                </button>\r\n            );\r\n            if(isShowFormAdd){\r\n                elmBtnShowForm = (\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-success btn-block\"\r\n                        onClick={this.clickAdd}\r\n                    >\r\n                        Close\r\n                    </button>\r\n                );\r\n            }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <Search onClickSearch={this.props.onClickSearch} />\r\n                    <Sort\r\n                        onClickSort={this.props.onClickSort}\r\n                        orderBy={this.props.orderBy}\r\n                        orderDir={this.props.orderDir}\r\n                    />\r\n                    <div className=\"col-xs-5 col-sm-5 col-md-5 col-lg-5\">\r\n                        {elmBtnShowForm}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Todo extends Component {\r\n\r\n    setElementLevel = (level) => {\r\n        let elmStatus = <span className=\"badge badge-secondary\">small</span>;\r\n        if (level === 1) {\r\n            elmStatus = <span className=\"badge  badge-info\">medium</span>;\r\n        } else if (level === 2) {\r\n            elmStatus = <span className=\"badge badge-danger\">high</span>;\r\n        }\r\n        return elmStatus;\r\n    }\r\n    handleDelete = (id) => {\r\n        this.props.handelDeleteTodo(id);\r\n    }\r\n    onClickEdit = (todo) => {\r\n        this.props.onClickEdit(todo);\r\n    }\r\n    render() {\r\n        const todo = this.props.todo;\r\n        const index = this.props.index;\r\n        //console.log(key);\r\n\r\n        return (\r\n            <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{todo.task}</td>\r\n                <td style={{ textAlign: \"center\", verticalAlign: \"middle\" }}>\r\n                    {this.setElementLevel(todo.level)}\r\n                </td>\r\n                <td\r\n                    className=\"btn-group-sm\"\r\n                    style={{ verticalAlign: \"middle\" }}\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-warning btn-sm\"\r\n                        onClick={() => this.onClickEdit(todo)}\r\n                    >\r\n                        Edit\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => this.handleDelete(todo.id)}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./TodoLists/Todo\";\r\n\r\nclass ListTodo extends Component {\r\n    render() {\r\n        const elmTodo = this.props.todoList.map((item, index) => {\r\n            return (\r\n                <Todo\r\n                    onClickEdit={this.props.onClickEdit}\r\n                    handelDeleteTodo={this.props.handelDeleteTodo}\r\n                    todo={item}\r\n                    key={index}\r\n                    index={index}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-success\">List Task</div>\r\n                <div className=\"card-body p-0\">\r\n                    <table className=\"table table-striped table-bordered table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ width: \"10%\" }}>#</th>\r\n                                <th>Task</th>\r\n                                <th style={{ width: \"10%\" }}>Level</th>\r\n                                <th style={{ width: \"20%\" }}>Status</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>{elmTodo}</tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListTodo;\r\n","import React, { Component } from \"react\";\r\n\r\nclass FormAdd extends Component {\r\n    state = {\r\n        id : '',\r\n        task: \"\",\r\n        level: 0,\r\n    };\r\n    clickClose = () => {\r\n        this.props.onClickClose();\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let todo = {\r\n            id: this.state.id,\r\n            task: this.state.task,\r\n            level: this.state.level\r\n        }\r\n\r\n        this.props.onClickSubmit(todo);     \r\n        // this.setState({\r\n        //     id : '',\r\n        //     task: \"\",\r\n        //     level: 0,\r\n        // } );\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        let todoSelected = this.props.todoSelected;\r\n        if(todoSelected != null && todoSelected.id != ''){\r\n            this.setState({\r\n                id : todoSelected.id,\r\n                task: todoSelected.task,\r\n                level: todoSelected.level,\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        if(nextProps.todoSelected != null && nextProps.todoSelected.id !== ''){\r\n            this.setState({\r\n                id : nextProps.todoSelected.id,\r\n                task: nextProps.todoSelected.task,\r\n                level: nextProps.todoSelected.level,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]:\r\n                event.target.type === \"checkbox\"\r\n                    ? event.target.checked\r\n                    : event.target.value,\r\n        });\r\n    }\r\n    render() {\r\n        //console.log(this.props.todoSelected);\r\n        return (\r\n            <div className=\"row m-1\">\r\n                <div className=\"col-md-4 col-lg-6 col-xl-7\" />\r\n                <div className=\"col-md-8 col-lg-6 col-xl-5\">\r\n                    <form onSubmit={this.handleSubmit} className=\"form-inline\">\r\n                        <div className=\"form-group\">\r\n                            <div className=\"input-group\">\r\n                                <input\r\n                                    value={this.state.task}\r\n                                    onChange={this.handleChange}\r\n                                    name=\"task\"\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Task name\"\r\n                                />\r\n                            </div>\r\n                            <label className=\"sr-only\" htmlFor=\"\" />\r\n                            <select\r\n                                value={this.state.level}\r\n                                onChange={this.handleChange}\r\n                                className=\"form-control\"\r\n                                name=\"level\"\r\n                                onChange={this.handleChange}\r\n                                required\r\n                            >\r\n                                <option value={0}> small</option>\r\n                                <option value={1}>medium</option>\r\n                                <option value={2}>high</option>\r\n                            </select>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n                                Submit\r\n                            </button>\r\n                            <button type=\"button\" className=\"btn btn-default\" onClick={this.clickClose}>\r\n                            Cancel\r\n                        </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormAdd;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Title from \"./components/Title\";\r\nimport Control from \"./components/Control\";\r\nimport ListTodo from \"./components/ListTodo\";\r\nimport FormAdd from \"./components/FormAdd\";\r\nimport { orderBy as funcOrderBy } from \"lodash\";\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\nclass App extends Component {\r\n\r\n    state = {\r\n        listTodoMock: JSON.parse( localStorage.getItem('task')) || [],\r\n        isShowForm: false,\r\n        strSearch: \"\",\r\n        orderBy: \"task\",\r\n        orderDir: \"asc\",\r\n        todoSelected: null,\r\n    };\r\n\r\n    onClickAdd = () => {\r\n        this.setState({\r\n            isShowForm: !this.state.isShowForm,\r\n            todoSelected: null,\r\n        });\r\n    };\r\n\r\n    handleSearch = (value) => {\r\n        this.setState({\r\n            strSearch: value,\r\n        });\r\n    };\r\n\r\n    handelSort = (orderBy, orderDir) => {\r\n        this.setState({\r\n            orderBy: orderBy,\r\n            orderDir: orderDir,\r\n        });\r\n    };\r\n\r\n    handelDeleteTodo = (id) => {\r\n        //console.log(id);\r\n        this.setState({\r\n            listTodoMock: this.state.listTodoMock.filter((e) => e.id !== id),\r\n        });\r\n        \r\n        localStorage.setItem(\"task\", JSON.stringify(this.state.todoList));\r\n    };\r\n\r\n    onClickSubmit = (todo) => {\r\n        let todoList = this.state.listTodoMock;\r\n\r\n        if (todo.id != null && todo.id !== \"\") {\r\n            todoList.forEach((item) => {\r\n                if (item.id === todo.id) {\r\n                    item.task = todo.task;\r\n                    item.level = todo.level;\r\n                }\r\n            });\r\n        } else {\r\n            todoList.push({ id: uuidv4(), level: +todo.level, task: todo.task });\r\n        }\r\n        this.setState({\r\n            listTodoMock: todoList,\r\n        });\r\n\r\n        localStorage.setItem(\"task\", JSON.stringify(todoList));\r\n    };\r\n\r\n    handleEditTodo = (todo) => {\r\n        //console.log(todo);\r\n        this.setState({\r\n            todoSelected: todo,\r\n            isShowForm: true,\r\n        });\r\n    };\r\n\r\n    componentWillUnmount = () => {\r\n        console.log(this.listTodoMock);\r\n    }\r\n\r\n    render() {\r\n        let todoList = this.state.listTodoMock;\r\n        let isShowForm = this.state.isShowForm;\r\n        const strSearch = this.state.strSearch;\r\n\r\n        if (strSearch.length > 0) {\r\n            todoList = this.state.listTodoMock.filter((e) =>\r\n                e.task.toLowerCase().includes(strSearch.toLowerCase())\r\n            );\r\n        } else {\r\n            todoList = this.state.listTodoMock;\r\n        }\r\n        todoList = funcOrderBy(\r\n            todoList,\r\n            [this.state.orderBy],\r\n            [this.state.orderDir]\r\n        );\r\n\r\n        let elmForm;\r\n        if (isShowForm) {\r\n            elmForm = (\r\n                <FormAdd\r\n                    onClickClose={this.onClickAdd}\r\n                    onClickSubmit={this.onClickSubmit}\r\n                    todoSelected={this.state.todoSelected}\r\n                />\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                <Title />\r\n                <Control\r\n                    onClickSearch={this.handleSearch}\r\n                    onClickAdd={this.onClickAdd}\r\n                    onClickSort={this.handelSort}\r\n                    orderBy={this.state.orderBy}\r\n                    orderDir={this.state.orderDir}\r\n                    isShowForm={isShowForm}\r\n                    srtSearch={this.props.strSearch}\r\n                />\r\n                {elmForm}\r\n                <ListTodo\r\n                    todoList={todoList}\r\n                    handelDeleteTodo={this.handelDeleteTodo}\r\n                    onClickEdit={this.handleEditTodo}\r\n                    srtSearch={this.props.strSearch}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}